{
	"info": {
		"_postman_id": "5a8ffb8b-1636-47ab-9ad9-899a3d695bc9",
		"name": "Salt Tests MQ Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Open order ucCreateRemoteConnection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var authServiceUrl = pm.environment.get('authService');",
							"var gatewayBaseUrl = pm.environment.get('gatewayBaseUrl');",
							"var username = pm.environment.get('username');",
							"var password = pm.environment.get('password');",
							"",
							"var sdk = require('postman-collection');",
							"",
							"var isValidTokenRequest = new sdk.Request({",
							"    url: gatewayBaseUrl, // Use an endpoint that requires being authenticated",
							"    method: 'POST',",
							"    header: [",
							"        new sdk.Header({",
							"            key: 'content-type',",
							"            value: 'application/json',",
							"        }),",
							"        new sdk.Header({",
							"            key: 'acccept',",
							"            value: 'application/json',",
							"        }),",
							"        new sdk.Header({",
							"            key: 'Authorization',",
							"            value: 'Bearer ' + pm.globals.get(\"jwttoken\"),",
							"        }),",
							"    ],",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify([])",
							"    } ",
							"});",
							"",
							"console.log(`Send test request to ${isValidTokenRequest.url} with token ${pm.globals.get(\"jwttoken\")}`);",
							"",
							"pm.sendRequest(isValidTokenRequest, function (err, response) {",
							"    if (response.code === 401) {",
							"        console.log(`Call refresh token`);",
							"        refreshToken();",
							"    }",
							"});",
							"",
							"function refreshToken() {",
							"    var tokenRequest = new sdk.Request({",
							"        url: authServiceUrl,",
							"        method: 'POST',",
							"        header: [",
							"            new sdk.Header({",
							"                key: 'content-type',",
							"                value: 'application/json'",
							"            }),",
							"            new sdk.Header({",
							"                key: 'acccept',",
							"                value: 'application/json'",
							"            }),",
							"        ],",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({",
							"                username: username,",
							"                password: password,",
							"                eauth: 'pam'",
							"            })",
							"        } ",
							"    });",
							"",
							"    console.log(`Send test request: ${tokenRequest.url}`);",
							"",
							"    pm.sendRequest(tokenRequest, function (err, response) {",
							"        console.log(`response code: ${response.code}`);",
							"        if (err) {",
							"            throw err;",
							"        }",
							"",
							"        if (response.code !== 200) {",
							"            throw new Error('Could not log in.');",
							"        }",
							"",
							"        pm.globals.set(\"jwttoken\", response.json().return[0].token);",
							"        console.log(`New token has been set: ${response.json().return[0].token}`);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwttoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n\t{\n\t\t\"client\": \"local_async\",\n\t\t\"tgt\": \"salt-minion1\",\n\t\t\"fun\": \"i_apicall.sls\",\n\t\t\"arg\": \"cmdb.openOrder\",\n\t\t\"kwarg\": {\n\t\t\t\"CallbackUrl\": \"http://api.corpintra.net/v2\",\n\t\t\t\"RequestId\": \"1212121\",\n\t\t\t\"pillar\": {\n\t\t\t\t\"INPUT\": {\n\t\t\t\t\t\"orderType\": \"CreateRemoteConnection\",\n\t\t\t\t\t\"extKey\": \"QM2.QM3.C0000002\",\n\t\t\t\t\t\"parameters\": {\n\t\t\t\t\t\t\"minionServerA\": \"salt-minion2\",\n\t\t\t\t\t\t\"minionServerB\": \"salt-minion3\",\n\t\t\t\t\t\t\"qmgrNameA\": \"QM2\",\n\t\t\t\t\t\t\"qmgrNameB\": \"QM3\",\n\t\t\t\t\t\t\"queueName\": \"C0000002\",\n\t\t\t\t\t\t\"qAliasA\": \"ARQ\",\n\t\t\t\t\t\t\"qAliasB\": \"ALQ\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseUrl}}",
					"host": [
						"{{gatewayBaseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Manage MQ Objects salt-minion2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var authServiceUrl = pm.environment.get('authService');",
							"var gatewayBaseUrl = pm.environment.get('gatewayBaseUrl');",
							"var username = pm.environment.get('username');",
							"var password = pm.environment.get('password');",
							"",
							"var sdk = require('postman-collection');",
							"",
							"var isValidTokenRequest = new sdk.Request({",
							"    url: gatewayBaseUrl, // Use an endpoint that requires being authenticated",
							"    method: 'POST',",
							"    header: [",
							"        new sdk.Header({",
							"            key: 'content-type',",
							"            value: 'application/json',",
							"        }),",
							"        new sdk.Header({",
							"            key: 'acccept',",
							"            value: 'application/json',",
							"        }),",
							"        new sdk.Header({",
							"            key: 'Authorization',",
							"            value: 'Bearer ' + pm.globals.get(\"jwttoken\"),",
							"        }),",
							"    ],",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify([])",
							"    } ",
							"});",
							"",
							"console.log(`Send test request to ${isValidTokenRequest.url} with token ${pm.globals.get(\"jwttoken\")}`);",
							"",
							"pm.sendRequest(isValidTokenRequest, function (err, response) {",
							"    if (response.code === 401) {",
							"        console.log(`Call refresh token`);",
							"        refreshToken();",
							"    }",
							"});",
							"",
							"function refreshToken() {",
							"    var tokenRequest = new sdk.Request({",
							"        url: authServiceUrl,",
							"        method: 'POST',",
							"        header: [",
							"            new sdk.Header({",
							"                key: 'content-type',",
							"                value: 'application/json'",
							"            }),",
							"            new sdk.Header({",
							"                key: 'acccept',",
							"                value: 'application/json'",
							"            }),",
							"        ],",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({",
							"                username: username,",
							"                password: password,",
							"                eauth: 'pam'",
							"            })",
							"        } ",
							"    });",
							"",
							"    console.log(`Send test request: ${tokenRequest.url}`);",
							"",
							"    pm.sendRequest(tokenRequest, function (err, response) {",
							"        console.log(`response code: ${response.code}`);",
							"        if (err) {",
							"            throw err;",
							"        }",
							"",
							"        if (response.code !== 200) {",
							"            throw new Error('Could not log in.');",
							"        }",
							"",
							"        pm.globals.set(\"jwttoken\", response.json().return[0].token);",
							"        console.log(`New token has been set: ${response.json().return[0].token}`);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwttoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n\t{\n\t\t\"client\": \"local_async\",\n\t\t\"tgt\": \"salt-minion2\",\n\t\t\"fun\": \"i_apicall.sls\",\n\t\t\"arg\": \"mq.manageMqObjectsPcfNew\",\n\t\t\"kwarg\": {\n\t\t\t\"CallbackUrl\": \"http://api.corpintra.net/v2\",\n\t\t\t\"RequestId\": \"1212121\"\n\t\t}\n\t}\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseUrl}}",
					"host": [
						"{{gatewayBaseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Manage MQ Objects salt-minion3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var authServiceUrl = pm.environment.get('authService');",
							"var gatewayBaseUrl = pm.environment.get('gatewayBaseUrl');",
							"var username = pm.environment.get('username');",
							"var password = pm.environment.get('password');",
							"",
							"var sdk = require('postman-collection');",
							"",
							"var isValidTokenRequest = new sdk.Request({",
							"    url: gatewayBaseUrl, // Use an endpoint that requires being authenticated",
							"    method: 'POST',",
							"    header: [",
							"        new sdk.Header({",
							"            key: 'content-type',",
							"            value: 'application/json',",
							"        }),",
							"        new sdk.Header({",
							"            key: 'acccept',",
							"            value: 'application/json',",
							"        }),",
							"        new sdk.Header({",
							"            key: 'Authorization',",
							"            value: 'Bearer ' + pm.globals.get(\"jwttoken\"),",
							"        }),",
							"    ],",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify([])",
							"    } ",
							"});",
							"",
							"console.log(`Send test request to ${isValidTokenRequest.url} with token ${pm.globals.get(\"jwttoken\")}`);",
							"",
							"pm.sendRequest(isValidTokenRequest, function (err, response) {",
							"    if (response.code === 401) {",
							"        console.log(`Call refresh token`);",
							"        refreshToken();",
							"    }",
							"});",
							"",
							"function refreshToken() {",
							"    var tokenRequest = new sdk.Request({",
							"        url: authServiceUrl,",
							"        method: 'POST',",
							"        header: [",
							"            new sdk.Header({",
							"                key: 'content-type',",
							"                value: 'application/json'",
							"            }),",
							"            new sdk.Header({",
							"                key: 'acccept',",
							"                value: 'application/json'",
							"            }),",
							"        ],",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({",
							"                username: username,",
							"                password: password,",
							"                eauth: 'pam'",
							"            })",
							"        } ",
							"    });",
							"",
							"    console.log(`Send test request: ${tokenRequest.url}`);",
							"",
							"    pm.sendRequest(tokenRequest, function (err, response) {",
							"        console.log(`response code: ${response.code}`);",
							"        if (err) {",
							"            throw err;",
							"        }",
							"",
							"        if (response.code !== 200) {",
							"            throw new Error('Could not log in.');",
							"        }",
							"",
							"        pm.globals.set(\"jwttoken\", response.json().return[0].token);",
							"        console.log(`New token has been set: ${response.json().return[0].token}`);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwttoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n\t{\n\t\t\"client\": \"local_async\",\n\t\t\"tgt\": \"salt-minion3\",\n\t\t\"fun\": \"i_apicall.sls\",\n\t\t\"arg\": \"mq.manageMqObjectsPcfNew\",\n\t\t\"kwarg\": {\n\t\t\t\"CallbackUrl\": \"http://api.corpintra.net/v2\",\n\t\t\t\"RequestId\": \"1212121\"\n\t\t}\n\t}\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseUrl}}",
					"host": [
						"{{gatewayBaseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Close order ucCreateRemoteConnection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var authServiceUrl = pm.environment.get('authService');",
							"var gatewayBaseUrl = pm.environment.get('gatewayBaseUrl');",
							"var username = pm.environment.get('username');",
							"var password = pm.environment.get('password');",
							"",
							"var sdk = require('postman-collection');",
							"",
							"var isValidTokenRequest = new sdk.Request({",
							"    url: gatewayBaseUrl, // Use an endpoint that requires being authenticated",
							"    method: 'POST',",
							"    header: [",
							"        new sdk.Header({",
							"            key: 'content-type',",
							"            value: 'application/json',",
							"        }),",
							"        new sdk.Header({",
							"            key: 'acccept',",
							"            value: 'application/json',",
							"        }),",
							"        new sdk.Header({",
							"            key: 'Authorization',",
							"            value: 'Bearer ' + pm.globals.get(\"jwttoken\"),",
							"        }),",
							"    ],",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify([])",
							"    } ",
							"});",
							"",
							"console.log(`Send test request to ${isValidTokenRequest.url} with token ${pm.globals.get(\"jwttoken\")}`);",
							"",
							"pm.sendRequest(isValidTokenRequest, function (err, response) {",
							"    if (response.code === 401) {",
							"        console.log(`Call refresh token`);",
							"        refreshToken();",
							"    }",
							"});",
							"",
							"function refreshToken() {",
							"    var tokenRequest = new sdk.Request({",
							"        url: authServiceUrl,",
							"        method: 'POST',",
							"        header: [",
							"            new sdk.Header({",
							"                key: 'content-type',",
							"                value: 'application/json'",
							"            }),",
							"            new sdk.Header({",
							"                key: 'acccept',",
							"                value: 'application/json'",
							"            }),",
							"        ],",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({",
							"                username: username,",
							"                password: password,",
							"                eauth: 'pam'",
							"            })",
							"        } ",
							"    });",
							"",
							"    console.log(`Send test request: ${tokenRequest.url}`);",
							"",
							"    pm.sendRequest(tokenRequest, function (err, response) {",
							"        console.log(`response code: ${response.code}`);",
							"        if (err) {",
							"            throw err;",
							"        }",
							"",
							"        if (response.code !== 200) {",
							"            throw new Error('Could not log in.');",
							"        }",
							"",
							"        pm.globals.set(\"jwttoken\", response.json().return[0].token);",
							"        console.log(`New token has been set: ${response.json().return[0].token}`);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwttoken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n\t{\n\t\t\"client\": \"local_async\",\n\t\t\"tgt\": \"salt-minion1\",\n\t\t\"fun\": \"i_apicall.sls\",\n\t\t\"arg\": \"cmdb.closeOrder\",\n\t\t\"kwarg\": {\n\t\t\t\"CallbackUrl\": \"http://api.corpintra.net/v2\",\n\t\t\t\"RequestId\": \"1212121\",\n\t\t\t\"pillar\": {\n\t\t\t\t\"INPUT\": {\n\t\t\t\t\t\"extKey\": \"QM2.QM3.C0000002\",\n\t\t\t\t\t\"isSucceeded\": \"True\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{gatewayBaseUrl}}",
					"host": [
						"{{gatewayBaseUrl}}"
					]
				}
			},
			"response": []
		}
	]
}